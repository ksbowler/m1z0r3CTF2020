from Crypto.Util.number import *
import gmpy2
import sympy
import math
import itertools
from sympy.ntheory.modular import crt

f = open("enc.txt")
c = [s.strip() for s in f.readlines()]
cipher = []
for k in c: cipher.append(int(k))

N1 = 115186289245152653275740500448391151850423307516644339490051621836459781367406570804536306575537499359788755194508662749843494946347928087942950218625554730595347836948499029681516705097071355435515662351280592327861271345330933331582609692531489887778380942767930134812040271936109770150657948103506518601279
e1 = 3

for enc in cipher:
	#print(int(enc))
	mes1, cc = gmpy2.iroot(enc,e1)
	if cc:
		cipher.remove(enc)
		print(long_to_bytes(int(mes1)))
		break

N2 = 190178283446613611053205624224893361497288644708017968588482449009525421990294323652723118755752957527982115609793487964779927096276158194040931050571306502869584101877681605946635822985535681922025099957827232037408903727271549343431738686995038421442755103206848283511461022810161158185812875829257947878435993725688148998349388413391217459633632528877142249759179
e2 = 65537

dic = sympy.factorint(N2)
primes = []
for n in dic.keys(): primes.append(n)
p2 = primes[0]
q2 = primes[1]

d2 = inverse(e2,(p2-1)*(q2-1))
for enc in cipher:
	mes2 = pow(enc,d2,N2)
	msg2 = long_to_bytes(mes2)
	if b'_7' in msg2:
		cipher.remove(enc)
		print(msg2)
		break

N3 = 142707402500756076725265548057611333017251621659551572306347171273858815880559262685507074636659436441620940282131708873596789893222352153696151470075911446853100493452131800444715364394415703323234927923373445854982162268829096321969103344925008223347021495859833670718590160897314530321085523543611554928169
e3 = 65537
N4 = 123132505567202593194845494179142703805822176374399590464268456547155699275753172740705818394613168424200544142914217072646842578229494659348409383069298915907702330092887400751609482897405643270232706206834670307681810402930601132041432598512713373715460493285686774000024952370735891624548308246777847161583
e4 = 65537

p34 = math.gcd(N3,N4)
q3 = N3//p34
q4 = N4//p34

d3 = inverse(e3,(p34-1)*(q3-1))
d4 = inverse(e4,(p34-1)*(q4-1))

for enc in cipher:
	mes3 = pow(enc,d3,N3)
	msg3 = long_to_bytes(mes3)
	if b'_1' in msg3:
		cipher.remove(enc)
		print(msg3)
		break

for enc in cipher:
	mes4 = pow(enc,d4,N4)
	msg4 = long_to_bytes(mes4)
	if b'__' in msg4:
		cipher.remove(enc)
		print(msg4)
		break
y5 = 884482498724405548668745061090584372608892918
g5 = 11
p5 = 1200388134289474682979582390855500170139311639
x5 = 1
while True:
	if y5 == pow(g5,x5,p5):
		break
	x5 += 1
check = False
for enc1 in cipher:
	inv1 = inverse(enc1,p5)
	for enc2 in cipher:
		mes5 = (pow(inv1,x5,p5)*enc2)%p5
		msg5 = long_to_bytes(mes5)
		if b'_h' in msg5:
			cipher.remove(enc1)
			cipher.remove(enc2)
			check = True
			print(msg5)
			break
	if check: break

N6 = 6731542143355472985879118760081865405232362447852965013421831684588131666075363635334138743153824656140319871940387115821469197353832338914344800527524081
e6_1 = 2371709818591866658028313413291246123189387123950286769945398675303680575059185268098002667251800390099095198694676681016245059268187289059230003185251415
e6_2 = 6335193750195145137892681910373627288683001054770903354923974138289545203255561389069296575711635536379054690401323388688883436411840550834596080233264285

#print(e6_2*11-e6_1)
assert e6_2*11-e6_1 == 2*2*2*3*5*7*31*32911*75707293*169540247*6227619944789*982652312412684624170089927601555778749047857365165512699054004037828272790825768000304153118955374276603827088475827
factor = [2,2,2,3,5,7,31,32911,75707293,169540247,6227619944789]
big = 982652312412684624170089927601555778749047857365165512699054004037828272790825768000304153118955374276603827088475827

check = False
for i in range(1,len(factor)+1):
	for lis in itertools.combinations(factor,i):
		phi_temp = big
		for j in lis: phi_temp *= j
		d6 = inverse(e6_1,phi_temp)
		for enc in cipher:
			mes6 = pow(enc,d6,N6)
			msg6 = long_to_bytes(mes6)
			if b'bone_' in msg6:
				print(msg6)
				cipher.remove(enc)
				check = True
				break
		if check: break
	if check: break

N7_1 = 93656998020461577169438737981770469145610921607037184674630082462433972232090398266515355617678200454018246408441951821931687077486411833354764665022159491118154193406564770152331186265213029256311321895430714716392627169208077584006866497445089592757836059262504565627656415105917059800301938694902515430287
N7_2 = 68265761116488266722249637768544380066459215839290418096890819124198288551500766418931426309157249327378340980580711629762983947856015102690792603448174582241919221658038600418168217151382065992227000249791466760746194119180713591386300152247474191710361863198571558715413030133753514467209752375319916743021
N7_3 = 98662323397667980792525353345800903123073985127851090288404153044550287819657620856853966267360313450190360464278671170041352237571941815967197983177048054167791930088512368422704678077625202773998348065251638043962008959722393109125775388999274913015713574805782286865745861933799576862458990389585651628771
e7 = 3

assert len(cipher) == 3
N7 = [N7_1, N7_2, N7_3]
for n in itertools.permutations(N7):
	mes7, nn = crt(n,cipher)
	mes7, ch = gmpy2.iroot(mes7,e7)
	if ch:
		print(long_to_bytes(int(mes7)))
		break

